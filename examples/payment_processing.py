# -*- coding: utf-8 -*-
from light_qiwi import Qiwi

api = Qiwi('00000000000000000000000000000000', '71234567890')

# Обработка платежей, которые были забинжены
@api.on_payment_func(amount=5)
def processing(payment, payload):
    """
    :param payment: Объект платежа
    :param payload: Полезная нагрузка, тут может быть айди пользователя, который оплатил платёж
    """

    amount = payment.amount    # Сумма платежа без комиссии
    total = payment.total      # Сума платежа с комиссией
    comment = payment.comment  # Комментарий к платежу
    account = payment.account  # Номер отправителя, терминала или название агента пополнения кошелька

    print(f"{account} отправил {total}р. с комментарием: {comment}")

    # >>> +79876543210 отправил 150.63р. с комментарием: комментарий.

    # Предположим функция отправляет сообщение пользователю об успешной оплате
    send_message(payload, f"Спасибо, ваш платёж на сумму {total} был успешно обработан!")


def send_message(user_id, message):
    # Представим себе тут код отправки сообщения
    pass


if __name__ == '__main__':

    # Ожидание платежа с комментарием и полезной нагрузкой в виде id пользователя
    # (Второй аргумент может быть любым, хоть функцию туда запихай)
    api.bind('комментарий', 10000000)

    """
       Первый сопособ подойдёт вам, если обработа платежей должна происходить фоново.
       Например, для ботов в телеграм и пр.

       Второй способ хорош, если программа нацелена на ожидание платежа.
   """
    api.start_threading()  # Запускает неблокирующую обработку платежей
    api.start()            # Запускает блокирующую обработку платежей
